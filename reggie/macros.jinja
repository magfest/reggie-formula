
{% macro systemd_service(
    name,
    exec_start,
    description=None,
    working_dir=None,
    includes=None,
    watch_any=None,
    logfile=None,
    part_of=None,
    user=None) -%}

{%- set slug = name|lower|replace(' ', '-') -%}
{%- set log = logfile or '/var/log/' ~ slug ~ '.log' -%}

{% if includes %}
include:
  {% for include in includes %}
  - {{ include }}
  {% endfor %}
{% endif %}

{{ slug }} rsyslog conf:
  file.managed:
    - name: /etc/rsyslog.d/{{ slug }}.conf
    - contents: |
        if $programname == '{{ slug }}' then {
          if $msg startswith ' ' then {
            $template bare_msg_format,"%msg:2:$:%\n"
            {{ log }};bare_msg_format
          } else {
            {{ log }}
          }
          stop
        }
    - listen_in:
      - service: rsyslog

{{ slug }} logrotate conf:
  file.managed:
    - name: /etc/logrotate.d/{{ slug }}
    - contents: |
        {{ log }} {
            daily
            missingok
            rotate 52
            compress
            delaycompress
            notifempty
            create 640 syslog adm
            sharedscripts
            postrotate
                invoke-rc.d rsyslog rotate > /dev/null
            endscript
        }

{{ slug }}.service:
  file.managed:
    - name: /lib/systemd/system/{{ slug }}.service
    - contents: |
        [Unit]
        Description={{ description or name }}
        {% if part_of -%}
        PartOf={{ part_of }}
        After={{ part_of }}
        {%- endif %}

        [Service]
        {% if working_dir %}WorkingDirectory={{ working_dir }}
        {% endif %}Restart=always
        {% if user %}User={{ user }}
        {% endif %}StandardOutput=syslog
        StandardError=syslog
        SyslogIdentifier={{ slug }}
        ExecStart={{ exec_start }}

        [Install]
        WantedBy={{ part_of or 'multi-user.target' }}
    - template: jinja

  service.running:
    - name: {{ slug }}
    - enable: True
    - watch_any:
      - file: /lib/systemd/system/{{ slug }}.service
      - file: /etc/rsyslog.d/{{ slug }}.conf
    {%- if watch_any %}
      {% for watch in watch_any %}
      - {{ watch }}
      {%- endfor %}
    {% endif %}
    {%- if includes %}
    - require:
      {% for include in includes %}
      - sls: {{ include }}
      {%- endfor %}
    {% endif %}
{%- endmacro %}


{%- macro encode_ini_value(value) -%}
  {%- if value is string -%}
    {%- if '\n' in value -%}
      {{ "'''" ~ value ~ "'''" }}
    {%- else -%}
      {%- set quote = "'" if '"' in value else '"' -%}
      {{ quote ~ value ~ quote }}
    {%- endif -%}
  {%- elif value is number -%}
    {{ value }}
  {%- elif value is not none -%}
    {%- if value|length == 1 -%}
      {{ encode_ini_value(value[0]) ~ ',' }}
    {%- elif value|length > 1 -%}
      {%- set comma = joiner(',') -%}
      {%- for v in value -%}{{ comma() }}{{ encode_ini_value(v) }}{%- endfor -%}
    {%- else -%}
      {{ ',' }}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}


{%- macro encode_ini(section, depth=1) -%}
  {#- First process settings at the current level -#}
  {%- set items = section.items() if section is mapping else section -%}
  {%- set sub_sections = [] -%}
  {%- for item in items -%}
    {%- if item is mapping -%}
{{ encode_ini(item, depth) }}
    {%- else -%}
      {%- set property, value = item -%}
      {%- if value is not mapping and (
          value is string
          or value is not sequence
          or value|length == 0
          or (value|length > 0 and value[0] is not mapping)) -%}
{{ property ~ ' = ' ~ encode_ini_value(value) ~ '\n' }}
      {%- else -%}
        {%- do sub_sections.append((property, value)) -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfor -%}

  {# Then recurse into each sub_section -#}
  {%- for sub_section, options in sub_sections %}
{{ ('[' * depth)  ~ sub_section ~ (']' * depth) }}
{{ encode_ini(options, depth + 1) }}
  {%- endfor -%}
{%- endmacro -%}


{%- macro dump_ini(data) -%}
# =============================================
# THIS FILE IS MANAGED BY SALT.
# Do not edit this file manually.
# Any changes will be automatically reverted.
# =============================================

{{ encode_ini(data) }}
{%- endmacro -%}

{#
    On windows, in vboxfs shared filesystems (used to share from win->linux),
    we get an error if we try to change the permissions, which salt does by
    default when it manages a file.  The only exception is that we can set 777
    permissions without an error.  This macro should be dropped into the middle
    of e.g. a "file.managed" state to optionally add the mode param.
#}
{%- macro handle_windows_permissions() -%}
    {% if grains['is_vagrant_windows'] | default(false) %}
    - mode: 0777
    {% endif %}
{%- endmacro -%}
